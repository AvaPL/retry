## changes

### retry.Policy

Retries are now defined in terms of a common and easier to work with interface, a `retry.Policy`, which is essentially the interface

    () => Future[T] => Future[T]
    
with a few implicit parameters. One for an instance of `retry.Success[T]` and one for an ExecutionContext.
This makes retries easier to pass around as a general interface.

    trait Policy {
      def apply[T](promise: () => Future[T])
       (implicit success: Success[T],
        executor: ExecutionContext): Future[T]    
    }

The previous three categories of retry attempts, `retry.Directly`, `retry.Pause`, and `retry.Backoff`, now define methods which produce retry.Policies. Your applications can then be free to mix and match retry policies as seen fit.

### retry forever

It was previously only possible to retry for a finite number of times. Sometimes you want to try, try, and try again until your future's value meets your definition of `retry.Success`. Each of the 3 retry modules now expose a `forever` method that will keep retrying until a successful result is produced using semantics tied to the type of retry.

    // retry pausing 1 second forever until tryHarder tries hard enough
    val forever = retry.Pause.forever(1.second)
    val future = forever(tryHarder)
   

### Odelayed retries

The platform hooks for scheduling future retries at a later time was refactored out into its own library, [odelay](https://github.com/softprops/odelay#readme). Hence, this version of retry no longer requires multiple modules. Retry as a library is only repsonsible for providing retry logic, relying on odelay for future retry scheduling. Retries which previously required an `retry.Timer` in implicit scope now require an implicit `odelay.Timer`.

### Successful composition

A library for retrying operations has a heavy interest understanding what it means to be "successful". `retry.Success` is a type class for encoding the semantics for what a "success" means for your future. A `retry.Success` is still a `retry.Success` in this version. In this version, they are also more composable. A preference is also taken for the factory method for constructing new success instances. For illustration, see the example below

     // a future's value will be inferred as a success if its value is greater than one
     val a = Success[Int](_ > 1)
     
     // a future's value will be inferred as a success if its value is less then three
     val b = Success[Int](_ < 3)
     
     // a future's value will inferred as a success if its value is greater than one or less than three
     val either = a.or(b)
     
     // a future's value with be inferred as a success if its value is both greater than one and less than three
     val both = a.and(b)
     
This interface defines a simple algebra for Ints. Your application most like defines Futures which return a more complex type. Experiment with this new interface to compose different definitions of success for your applications types to enrich your retry experience.
     
If you are feeling adventurous you consider `retry.Success.always` or `retry.Success.never` which will either infer success from any resulting value
or no resulting value respectively.

### re-determine how to retry When the right stars are in alignment

Sometimes things don't go according to plan. Sometimes you are working with "exceptional" code that expresses failure with fantastic runtime exceptions.
Sometimes you are working with a rate-limited service that will respond with a suggested time to come back knocking at a later time.
For these cases retry exposes an adaptive interface called `retry.When` which return takes a PartialFunction of Any to Policy.

    val policy = retry.When {
      case RetryAt(time) => retry.Pause(delay = time.seconds)
    }
    policy(issueRateLimitedRequest)
